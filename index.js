/*
 * ðŸ‘‰ : moves the memory pointer to the next cell
 * ðŸ‘ˆ : moves the memory pointer to the previous cell
 * ðŸ‘† : increment the memory cell at the current position
 * ðŸ‘‡ : decreases the memory cell at the current position.
 * ðŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ðŸ¤›
 * ðŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ðŸ¤œ
 * ðŸ‘Š : Display the current character represented by the ASCII code defined by the current position.
 */
const MIN_CELL = 0;
const MAX_CELL = 255;

const centinelCell = value => {
    if (value > MAX_CELL) return MIN_CELL;
    if (value < MIN_CELL) return MAX_CELL;
    return value;
}

const getLastIndex = (index, AOS, reverse) => {
    let loops = 1;
    if (!reverse) {
        let i = index + 1;
        while (i < AOS.length) {
            if (AOS[i] === 'ðŸ¤œ') loops++;
            if (AOS[i] === 'ðŸ¤›') loops--;
            if (loops === 0) return i;
            i++;
        }
    } else {
        let i = index - 1;
        while (i >= 0) {
            if (AOS[i] === 'ðŸ¤œ') loops--;
            if (AOS[i] === 'ðŸ¤›') loops++;
            if (loops === 0) return i;
            i--;
        }
    }
}

function translate (input) {
    const AOS = Array.from(input);
    let pointer = 0;
    let memory = [0];
    let output = '';
    for (let i = 0; i < AOS.length; i++) {
        switch(AOS[i]) {
            case 'ðŸ‘‰': pointer++; memory[pointer] ??= 0; break;
            case 'ðŸ‘ˆ': pointer--; memory[pointer] ??= 0; break;
            case 'ðŸ‘†': memory[pointer] = centinelCell(memory[pointer]+1); break;
            case 'ðŸ‘‡': memory[pointer] = centinelCell(memory[pointer]-1); break;
            case 'ðŸ¤œ': 
                if (memory[pointer] === 0) {
                    i = getLastIndex(i, AOS, false);
                }
                break;
            case 'ðŸ¤›': 
                if (memory[pointer] !== 0) {
                    i = getLastIndex(i, AOS, true);
                }
                break;
            case 'ðŸ‘Š': output += String.fromCharCode(memory[pointer]); break;
        }
        // console.log(`${AOS[i]} ; ${i} ; ${pointer} ; ${output} ; ${memory}`);
    }
    console.log(output);
}

//translate('ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š');

translate('ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š');