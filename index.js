/*
 * ðŸ‘‰ : moves the memory pointer to the next cell
 * ðŸ‘ˆ : moves the memory pointer to the previous cell
 * ðŸ‘† : increment the memory cell at the current position
 * ðŸ‘‡ : decreases the memory cell at the current position.
 * ðŸ¤œ : if the memory cell at the current position is 0, jump just after the corresponding ðŸ¤›
 * ðŸ¤› : if the memory cell at the current position is not 0, jump just after the corresponding ðŸ¤œ
 * ðŸ‘Š : Display the current character represented by the ASCII code defined by the current position.
 */
const MIN_CELL = 0;
const MAX_CELL = 255;

const processLoops = (AOS) => {
    let stack = [], loopPairs = [];
    for (let i = 0; i < AOS.length; i++) {
        if (AOS[i] === 'ðŸ¤œ') {
            stack.push(i);
        } else if (AOS[i] === 'ðŸ¤›') {
            let openLoop = stack.pop();
            loopPairs[openLoop] = i;
            loopPairs[i] = openLoop;
        }
    }
    return loopPairs;
}

const translate = (input) => {
    const AOS = Array.from(input);
    let loopPairs = processLoops(AOS); // Generamos estructura con pares de Ã­ndices para loops
    let pointer = 0;
    let memory = [0];
    let output = '';

    for (let i = 0; i < AOS.length; i++) {
        switch(AOS[i]) {
            case 'ðŸ‘‰': pointer++; memory[pointer] ??= 0; break;
            case 'ðŸ‘ˆ': pointer--; memory[pointer] ??= 0; break;
            case 'ðŸ‘†': memory[pointer] = memory[pointer]+1 > MAX_CELL ? MIN_CELL : memory[pointer]+1; break;
            case 'ðŸ‘‡': memory[pointer] = memory[pointer]-1 < MIN_CELL ? MAX_CELL : memory[pointer]-1; break;
            case 'ðŸ¤œ': 
                if (memory[pointer] === 0) {
                    i = loopPairs[i];
                }
                break;
            case 'ðŸ¤›': 
                if (memory[pointer] !== 0) {
                    i = loopPairs[i];
                }
                break;
            case 'ðŸ‘Š': output += String.fromCharCode(memory[pointer]); break;
        }
        // console.log(`${AOS[i]} ; ${i} ; ${pointer} ; ${output} ; ${memory}`);
    }
    console.log(output);
}

translate('ðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘Š');

translate('ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‡ðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘†ðŸ‘‰ðŸ‘‡ðŸ¤œðŸ‘†ðŸ¤›ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘ˆðŸ¤›ðŸ‘‰ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘‰ðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘‡ðŸ‘ŠðŸ‘ˆðŸ‘ˆðŸ‘†ðŸ¤œðŸ‘‰ðŸ¤œðŸ‘†ðŸ‘‰ðŸ‘†ðŸ¤›ðŸ‘‰ðŸ‘‰ðŸ¤›ðŸ‘ˆðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘‰ðŸ‘ŠðŸ‘†ðŸ‘†ðŸ‘†ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘‡ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘ŠðŸ‘‰ðŸ‘†ðŸ‘Š');